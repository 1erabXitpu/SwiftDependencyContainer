// Template name: Annotations
// Template version: 1.0

{% macro generateInitializer initializer resolver %}
    {% if initializer.parameters.count > 0 %}
        {{ type.name }}(
            {% for parameter in initializer.parameters %}
            {{ parameter.name }}: {{ resolver }}{% ifnot forloop.last %}, {% endif %}
            {% endfor %}
        )
        {% else %}
        {{ type.name }}()
    {% endif %}
{% endmacro %}

{% macro numberPrefix count index -%}
    {%- if count > 1 -%}{{ index }}{%- endif -%}
{%- endmacro %}

import SwiftDependencyContainer

/*
    Examples:
    /// @Factory(resolver: MyDependencies.resolve)
    /// @Factory
*/
{% for type in types.classes %}
  {% for comment in type.documentation %}
    {% if comment|contains:"@Factory" %}
extension {{ type.name }} {
    // TODO: leverage 'AutoSetup' instead of 'resolver' parameter
    {% for initializer in type.allMethods|initializer %}
    static func create{% call numberPrefix forloop.length forloop.counter %}(_ container: DependencyContainer) -> {{ type.name }} {
        {% call generateInitializer initializer "try! container.resolve()" %}
    }
    
        {% if comment|contains:"(resolver:" %}
    static func create{% call numberPrefix forloop.length forloop.counter %}() -> {{ type.name }} {
        {% call generateInitializer initializer comment|replace:"@Factory(resolver: ",""|replace:")","()" %}
    }
        {% endif %}
    {% endfor %}
}
    {% endif %}
  {% endfor %}
{% endfor %}

{% macro isEager annotation -%}
    {%- if annotation|contains:"Eager" -%}true{%- else -%}false{%- endif -%}
{%- endmacro %}

{% macro parseTypes annotation -%}
    {{ annotation|replace:"@Singleton(types: [",""|replace:"@EagerSingleton(types: [",""|replace:"])","" }}
{%- endmacro %}

/*
    Examples:
    /// @EagerSingleton(types: [MyAbstraction.self])
    /// @Singleton(types: [MyAbstraction.self])
    /// @EagerSingleton
    /// @Singleton
*/
{% for type in types.all %}
  {% for comment in type.documentation %}
    {% if comment|contains:"@Singleton" or comment|contains:"@EagerSingleton" %}
extension {{ type.name }} {
    {% for initializer in type.allMethods|initializer %}
    static func register(in container: DependencyContainer, isEager: Bool = {% call isEager comment %}) throws {
        {% if comment|contains:"(types:" %}
        try container.add(for: [{% call parseTypes comment %}], isEager: isEager) {
        {% call generateInitializer initializer "try $0.resolve()" %}
        }
        {% else %}
        try container.add(isEager: isEager) {
        {% call generateInitializer initializer "try $0.resolve()" %}
        }
        {% endif %}
    }
        {% break %}
    {% endfor %}
    
    {% if type.allMethods|initializer|count == 0 %}
    static func register(in container: DependencyContainer, isEager: Bool = {% call isEager comment %}) throws {
        {% if comment|contains:"(types:" %}
        try container.add(for: [{% call parseTypes comment %}], isEager: isEager) {
    {% call generateInitializer initializer "try $0.resolve()" %}
        }
        {% else %}
        try container.add(isEager: isEager) { {{ type.name }}() }
        {% endif %}
    }
    {% endif %}
    
    //static func resolve(_ container: DependencyContainer) -> {{ type.name }} {
    //    try! container.resolve()
    //}
}

    {% endif %}
  {% endfor %}
{% endfor %}

/*
    AutoSetup
*/
{% macro generateDependecyPair type parent %}
    var {{ type|lowerFirstLetter }}: {{ type }} { {{ parent }}.{{ type|lowerFirstLetter }} }
    static var {{ type|lowerFirstLetter }}: {{ type }} { resolve() }
{%- endmacro %}

{% for root in types.based.AutoSetup %}
extension {{ root.name}} {
    static let shared = {{ root.name }}() // TODO: check for empty constructor
    
    static func setup() {
    {% if types.based.AutoSetup|count > 1 %}
    fatalError("There can only be one instance implementing 'AutoSetup'!")
    {% endif %}
        let container = shared.container
    {% for type in types.all %}
        {% for comment in type.documentation %}
            {% if comment|contains:"@Singleton" or comment|contains:"@EagerSingleton" %}
        try! {{ type.name }}.register(in: container)
            {% endif %}
        {% endfor %}
    {% endfor %}
    
        try! shared.override(container)
 
        try! container.bootstrap()
    }
    
    {% for type in types.all %}
        {% for comment in type.documentation %}
            {% if comment|contains:"@Singleton(types:" %} // TODO: Handle @EagerSingleton
                {% for additionalType in comment|replace:"@Singleton(types: [",""|replace:"])",""|replace:".self",""|split: ", " %}
                    {% call generateDependecyPair additionalType root.name %}
                {% endfor %}
            {% else %}
                {% if comment|contains:"@Singleton" or comment|contains:"@EagerSingleton" %}
                    {% call generateDependecyPair type.name root.name %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    // TODO: go over the dependencies registered using the override function
    {% for method in root.methods %}
        {% if method.name|contains:"override(_ container:" %}
        // {{ method.name }}
        {% endif %}
    {% endfor %}
    
    fileprivate static func resolve<T>() -> T {
        try! shared.container.resolve()
    }
}
    {% break %}
{% endfor %}
