// Template name: AutoSetup
// Template version: 1.0

import SwiftDependencyContainer

{% macro addImports %}
{% for import in argument.imports where import != argument.target %}
import {{ import }}
{% endfor %}
{% endmacro %}

{% macro hasTypeInformation comment -%}
    {%- if comment|contains:"(types:" or comment|replace:"@Singleton",""|replace:"@EagerSingleton",""|replace:"(",""|replace:")","" != "" -%}true{%- else -%}false{%- endif -%}
{%- endmacro %}

{% macro parseTypes annotation -%}
    {{ annotation|replace:"@Singleton(",""|replace:"types: [",""|replace:"@EagerSingleton(",""|replace:"types: [",""|replace:",",".self,"|replace:"]",""|replace:")",".self" }}
{%- endmacro %}

public class {{ argument.target }}Container {
    public static func register(using container: DependencyContainer) throws {
    {% for type in types.all %}
        {% for comment in type.documentation %}
            {% if comment|contains:"@Singleton" or comment|contains:"@EagerSingleton" %}
        try {{ type.name }}.register(in: container)
            {% endif %}
        {% endfor %}
    {% endfor %}
    }
    
    /// resolves every registered singleton, shouldn't be used in production!
    public static func verifyResolvability(_ container: DependencyContainer) throws {
    {% for type in types.all %}
        {% for comment in type.documentation %}
        {% if comment|contains:"@Singleton" or comment|contains:"@EagerSingleton" %}
            {% set hasTypeInformation %}{% call hasTypeInformation comment %}{% endset %}
            {% if hasTypeInformation == "true" %}
                {% if comment|contains:"types:" %}
                    {% for type in comment|replace:"@Singleton(types: [",""|replace:"@EagerSingleton(types: [",""|replace:"])",""|replace:".self",""|split: ", " %}
        _ = try container.resolve({{ type }}.self)
                    {% endfor %}
                {% else %}
        _ = try container.resolve({% call parseTypes comment %})
                {% endif %}
            {% else %}
                {% if comment|contains:"@Singleton" or comment|contains:"@EagerSingleton" %}
        _ = try container.resolve({{ type.name }}.self)
                {% endif %}
            {% endif %}
        {% endif %}
        {% endfor %}
    {% endfor %}
    }
}

{% macro generateInitializer initializer %}
    {% if initializer.parameters.count > 0 %}
        {{ type.name }}(
            {% for parameter in initializer.parameters %}
                {% if parameter.typeName.name == "Resolver" %}
            {{ parameter.name }}: container.resolver(){% ifnot forloop.last %}, {% endif %}
                {% else %}
                    {% set isPrimitiveType %}{% call isPrimitiveType parameter %}{% endset %}
                    {% if isPrimitiveType == "true" %}
            {{ parameter.name }}: try $0.resolve("Primitive data types, such as '{{ parameter.typeName }}' aren't currently supported. Please take a look at "){% ifnot forloop.last %}, {% endif %}
                    {% else %}
            {{ parameter.name }}: try $0.resolve(){% ifnot forloop.last %}, {% endif %}
                    {% endif %}
                {% endif %}
            {% endfor %}
        )
        {% else %}
        {{ type.name }}()
    {% endif %}
{% endmacro %}

{% macro isEager annotation -%}
    {%- if annotation|contains:"Eager" -%}true{%- else -%}false{%- endif -%}
{%- endmacro %}

{% macro isPrimitiveType parameter -%}
    {% set typeName %}{{ parameter.unwrappedTypeName }}{% endset %}
    {%- if typeName == "TimeInterval" or typeName == "Double" or typeName == "Float" or typeName == "Date" or typeName == "Bool" or typeName == "Character" -%}true{%- else -%}false{%- endif -%}
{%- endmacro %}

{% for type in types.all %}
  {% for comment in type.documentation %}
    {% if comment|contains:"@Singleton" or comment|contains:"@EagerSingleton" %}
        {% set hasTypeInformation %}{% call hasTypeInformation comment %}{% endset %}
    
{% call addImports %}
{% for import in type.imports where import != argument.target %}
import {{ import }}
{% endfor %}

extension {{ type.name }} {

    {% for initializer in type.allMethods|initializer %}
    static func register(in container: DependencyContainer, isEager: Bool = {% call isEager comment %}) throws {
        {% if hasTypeInformation == "true" %}
        try container.register([{% call parseTypes comment %}], isEager: isEager) {
        {% call generateInitializer initializer %}
        }
        {% else %}
        try container.register(isEager: isEager) {
        {% call generateInitializer initializer %}
        }
        {% endif %}
    }
        {% break %}
    {% endfor %}
    
    {% if type.allMethods|initializer|count == 0 %}
    static func register(in container: DependencyContainer, isEager: Bool = {% call isEager comment %}) throws {
        {% if hasTypeInformation == "true" %}
        try container.register([{% call parseTypes comment %}], isEager: isEager) {
    {% call generateInitializer initializer %}
        }
        {% else %}
        try container.register(isEager: isEager) { {{ type.name }}() }
        {% endif %}
    }
    {% endif %}
}
    {% endif %}
  {% endfor %}
{% endfor %}
